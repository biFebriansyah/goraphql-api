package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"errors"
	"fmt"

	"github.com/biFebriansyah/goraphql/graph/model"
	"github.com/biFebriansyah/goraphql/utils"
)

// SignUp is the resolver for the signUp field.
func (r *mutationResolver) SignUp(ctx context.Context, input model.SignupInput) (*model.Users, error) {
	pass, err := utils.HashPassword(input.Password)
	if err != nil {
		return nil, fmt.Errorf("fail hasing password: %w", err)
	}

	input.Password = pass
	return r.UserService.CreateOne(input)
}

// SignIn is the resolver for the signIn field.
func (r *mutationResolver) SignIn(ctx context.Context, input model.SigninInput) (*model.UserToken, error) {
	userData, err := r.UserService.GetByEmail(input.Email)
	if err != nil {
		return nil, errors.New("email not found")
	}

	if !utils.CheckPasswordHash(input.Password, userData.Password) {
		return nil, errors.New("wrong password")
	}

	token, err := utils.GenerateJwt(userData.ID, *userData.Admin)
	if err != nil {
		return nil, fmt.Errorf("fail generate token: %w", err)
	}

	return &model.UserToken{Token: token}, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateInput) (*model.Users, error) {
	if input.Password != nil {
		pass, _ := utils.HashPassword(*input.Password)
		input.Password = &pass
	}

	return r.UserService.UpdateOne(input)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (string, error) {
	return r.UserService.DeleteOne(id)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.Users, error) {
	return r.UserService.GetById(id)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, page int32, limit int32, name *string) (*model.UsersDetail, error) {
	return r.UserService.GetAll(int64(page), int64(limit), name)
}
